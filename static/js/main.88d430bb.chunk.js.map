{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","onChange","placeholder","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAaeA,EAZF,SAACC,GAEV,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,gCACI,6BAAKJ,EAAMK,OACX,4BAAIL,EAAMM,eCcXC,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACA,8BAEYA,EAAOC,KAAK,SAACC,EAAMC,GACf,OAAO,cAAC,EAAD,CAEHP,GAAII,EAAOG,GAAGP,GACbC,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,OAHZK,SCGfC,EAZG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,qBAAKb,UAAU,MAAf,SACI,uBACAA,UAAU,mCACVc,KAAK,SACLC,SAAYF,EACZG,YAAY,qBCITC,G,MAXA,SAAClB,GAEZ,OACI,qBAAKmB,MAAO,CAACC,UAAW,SACxBC,OAAQ,kBACRC,OAAQ,SAFR,SAGKtB,EAAMuB,aCcJC,E,kDAnBX,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IACDyB,MAAQ,CACTC,UAAU,GAHC,E,8DAOAC,EAAOC,GACtBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,wDAEJG,KAAK7B,MAAMuB,a,GAhBEQ,aCkDbC,E,kDA3CX,aAAe,IAAD,8BACV,gBAcJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEjB,YAAaqB,EAAMC,OAAOC,SAd1C,EAAKX,MAAQ,CACTjB,OAAQ,GACRK,YAAa,IAJP,E,gEAQO,IAAD,OAChBwB,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAU,CAACtB,OAAQiC,S,+BAQjC,IAAD,OAECC,EAAiBb,KAAKJ,MAAMjB,OAAOmC,QAAO,SAAAC,GAAK,OACjDA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKrB,MAAMZ,YAAYgC,kBAG7D,OAAgC,IAA7BhB,KAAKJ,MAAMjB,OAAOuC,OACd,qBAAK9C,UAAU,KAAf,SAAoB,8CAGvB,sBAAKA,UAAU,KAAf,UACA,oBAAIA,UAAU,KAAd,yBACI,cAAC,EAAD,CAAWa,aAAce,KAAKI,iBAClC,cAAC,EAAD,UACI,cAAC,EAAD,UACE,cAAC,EAAD,CAAUzB,OAAUkC,e,GApCpBX,aCKHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.88d430bb.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = (props) => {\r\n//    const {name, email, id} = props\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${props.id}?200x200`}/>\r\n            <div >\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n  \r\n    return (\r\n    <div >\r\n            {\r\n                robots.map( (user, i) => {\r\n                    return <Card \r\n                         key={i} \r\n                        id={robots[i].id} \r\n                         name={robots[i].name} \r\n                         email={robots[i].email} \r\n                    />\r\n                 })\r\n            }\r\n    </div>  \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bn-lightest-blue'\r\n            type='search' \r\n            onChange= { searchChange }\r\n            placeholder='search robots' />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","//import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return (\r\n        <div style={{overflowY: 'scroll', \r\n        border: '1px solid black', \r\n        height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch( error, info) {\r\n        this.setState({ hasError: true});        \r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Opps... Thats not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nclass App extends Component  {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then( response => response.json() )\r\n        .then(users => this.setState( {robots: users})\r\n        );\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value });\r\n    }\r\n\r\n    render() {\r\n\r\n        const filteredRobots = this.state.robots.filter(robot =>\r\n            robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n          );\r\n\r\n        if(this.state.robots.length === 0) {\r\n        return <div className='tc'><h1>Loading...</h1></div>\r\n        } else {\r\n        return (\r\n            <div className='tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundary>\r\n                  <CardList robots = {filteredRobots} />\r\n              </ErrorBoundary>\r\n            </Scroll>\r\n            </div>\r\n        );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers//App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}